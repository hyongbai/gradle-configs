/*
 * Copyright 2013 Chris Banes
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

def isAndroid(Project p) {
    return p.getPlugins().hasPlugin('com.android.application') || p.getPlugins().hasPlugin('com.android.library');
}

apply plugin: 'maven'
apply plugin: 'signing'

group = GROUP
version = VERSION_NAME

def bintrayFile = file("${System.getenv('enims_keys')}/bintray_prop")
if (bintrayFile.exists()) {
    Properties properties = new Properties()
    properties.load(new FileInputStream(bintrayFile))
    ext.set("BINTRAY_KEY", properties.getProperty("bintray.apikey"))
}

ext.set("REPOSITORY_URL", "https://api.bintray.com/maven/${POM_DEVELOPER_ID}/${BINTRAY_REPO}/${BINTRAY_PRJ}")

def isReleaseBuild() {
    return VERSION_NAME.contains("SNAPSHOT") == false
}

def getReleaseRepositoryUrl() {
    return hasProperty('RELEASE_REPOSITORY_URL') ? RELEASE_REPOSITORY_URL : "${REPOSITORY_URL}"
}

def getSnapshotRepositoryUrl() {
    return hasProperty('SNAPSHOT_REPOSITORY_URL') ? SNAPSHOT_REPOSITORY_URL : "${REPOSITORY_URL}"
}

def getRepositoryUsername() {
    return hasProperty('SONATYPE_NEXUS_USERNAME') ? SONATYPE_NEXUS_USERNAME : "${POM_DEVELOPER_ID}"
}

def getRepositoryPassword() {
    return hasProperty('SONATYPE_NEXUS_PASSWORD') ? SONATYPE_NEXUS_PASSWORD : hasProperty('BINTRAY_KEY') ? "${BINTRAY_KEY}" : "";
}

println(String.format("Release=%s, RepositoryUrl=%s, SnapshotUrl=%s, UserName=%s, Password=%s ",
        isReleaseBuild(), getReleaseRepositoryUrl(), getSnapshotRepositoryUrl(), getRepositoryUsername(), getRepositoryPassword()))

def configPom(MavenPom pom) {
    pom.groupId = GROUP
    pom.artifactId = POM_ARTIFACT_ID
    pom.version = VERSION_NAME

    pom.project {
        name POM_NAME
        packaging POM_PACKAGING
        description POM_DESCRIPTION
        url POM_URL

        scm {
            url POM_SCM_URL
            connection POM_SCM_CONNECTION
            developerConnection POM_SCM_DEV_CONNECTION
        }

        licenses {
            license {
                name POM_LICENCE_NAME
                url POM_LICENCE_URL
                distribution POM_LICENCE_DIST
            }
        }

        developers {
            developer {
                id POM_DEVELOPER_ID
                name POM_DEVELOPER_NAME
            }
        }
    }
}
//
afterEvaluate { project ->
    uploadArchives {
        repositories {
            mavenDeployer {
                beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

                repository(url: getReleaseRepositoryUrl()) {
                    authentication(userName: getRepositoryUsername(), password: getRepositoryPassword())
                }
                snapshotRepository(url: getSnapshotRepositoryUrl()) {
                    authentication(userName: getRepositoryUsername(), password: getRepositoryPassword())
                }
                configPom(pom)
            }
        }
    }

    signing {
        required { isReleaseBuild() && gradle.taskGraph.hasTask("uploadArchives") }
        sign configurations.archives
    }

    if (isAndroid(project)) {
        task install(type: Upload, dependsOn: assemble) {
            repositories.mavenInstaller {
                configuration = configurations.archives
                configPom(pom)
            }
        }

        task androidJavadocs(type: Javadoc) {
            source = android.sourceSets.main.java.source
            classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
        }

        task androidJavadocsJar(type: Jar, dependsOn: androidJavadocs) {
            classifier = 'javadoc'
            from androidJavadocs.destinationDir
        }

        task androidSourcesJar(type: Jar) {
            classifier = 'sources'
            from android.sourceSets.main.java.source
        }
    } else {
        install {
            repositories.mavenInstaller {
                configPom(pom)
            }
        }

        task sourcesJar(type: Jar, dependsOn: classes) {
            classifier = 'sources'
            from sourceSets.main.allSource
        }

        task javadocJar(type: Jar, dependsOn: javadoc) {
            classifier = 'javadoc'
            from javadoc.destinationDir
        }
    }

    if (JavaVersion.current().isJava8Compatible()) {
        allprojects {
            tasks.withType(Javadoc) {
                options.addStringOption('Xdoclint:none', '-quiet')
            }
        }
    }

    artifacts {
        if (isAndroid(project)) {
            archives androidSourcesJar
            archives androidJavadocsJar
        } else {
            archives sourcesJar
            archives javadocJar
        }
    }
}
